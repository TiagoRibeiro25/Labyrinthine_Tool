// Whenever you update your Prisma schema, you will have to update your database schema using either "prisma migrate dev" or "prisma db push".
// This will keep your database schema in sync with your Prisma schema.
// The commands will also regenerate Prisma Client.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  username         String          @unique
  password         String          @db.VarChar(255)
  discordUsername  String?
  steamProfileUrl  String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  userCosmetics    UserCosmetic[]
  sentRequests     FriendRequest[] @relation("sentRequests")
  receivedRequests FriendRequest[] @relation("receivedRequests")

  @@index([id])
  @@index([username])
}

model Cosmetic {
  id               String         @id @default(uuid())
  name             String
  type             String // disc, hat, clothing, wrist, flashlight, lantern, glowstick, face
  source           String // shop, event, ...
  inGamePictureUrl String
  iconUrl          String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userCosmetics    UserCosmetic[]

  @@index([id])
  @@index([type])
  @@index([source])
}

model UserCosmetic {
  id         String   @id @default(uuid())
  userId     String
  cosmeticId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  cosmetic   Cosmetic @relation(fields: [cosmeticId], references: [id])

  @@unique([userId, cosmeticId])
  @@index([userId])
  @@index([cosmeticId])
}

model FriendRequest {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  status     String // pending, accepted
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt // if accepted, this is the time of acceptance
  sender     User     @relation("sentRequests", fields: [senderId], references: [id])
  receiver   User     @relation("receivedRequests", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}
